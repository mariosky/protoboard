# Generated by Django 2.1.1 on 2018-09-13 19:50

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AuthorLearningActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_description', models.TextField()),
                ('image', models.ImageField(blank=True, upload_to='courses')),
                ('private', models.BooleanField(default=False)),
                ('html_description', models.TextField(blank=True)),
                ('start_date', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FacebookSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField(unique=True)),
                ('expires', models.IntegerField(null=True)),
                ('uid', models.BigIntegerField(null=True, unique=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GoogleSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField(unique=True)),
                ('expires_in', models.IntegerField(null=True)),
                ('refresh_token', models.TextField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('image', models.URLField(blank=True)),
                ('uri', models.URLField(blank=True)),
                ('lom', models.URLField(blank=True)),
                ('pre_condition_rule', models.TextField(blank=True)),
                ('choice_exit', models.BooleanField(default=True)),
                ('rollup_rule', models.TextField(blank=True, default='completed IF All completed')),
                ('rollup_progress', models.BooleanField(default=True)),
                ('attempt_limit', models.PositiveSmallIntegerField(default=100)),
                ('available_from', models.DateTimeField(null=True)),
                ('available_until', models.DateTimeField(null=True)),
                ('is_container', models.BooleanField(default=False)),
                ('is_visible', models.BooleanField(default=True)),
                ('order_in_container', models.PositiveIntegerField(default=0)),
                ('rules', models.TextField(blank=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='activitytree.LearningActivity')),
                ('root', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='activitytree.LearningActivity')),
            ],
        ),
        migrations.CreateModel(
            name='LearningActivityRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField()),
                ('context', models.PositiveSmallIntegerField()),
                ('learning_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activitytree.LearningActivity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LearningStyleInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visual', models.PositiveSmallIntegerField()),
                ('verbal', models.PositiveSmallIntegerField()),
                ('aural', models.PositiveSmallIntegerField()),
                ('physical', models.PositiveSmallIntegerField()),
                ('logical', models.PositiveSmallIntegerField()),
                ('social', models.PositiveSmallIntegerField()),
                ('solitary', models.PositiveSmallIntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ULA_Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.TimeField(auto_now=True)),
                ('context', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='UserLearningActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_condition', models.CharField(blank=True, default='', max_length=32)),
                ('recommendation_value', models.PositiveSmallIntegerField(default=0, null=True)),
                ('progress_status', models.CharField(blank=True, default='incomplete', max_length=16)),
                ('objective_status', models.CharField(blank=True, default='notSatisfied', max_length=16)),
                ('objective_measure', models.FloatField(default=None, null=True)),
                ('last_visited', models.DateTimeField(default=None, null=True)),
                ('num_attempts', models.PositiveSmallIntegerField(default=0)),
                ('suspended', models.BooleanField(default=False)),
                ('accumulated_time', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=3, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('learning_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activitytree.LearningActivity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook_uid', models.DecimalField(decimal_places=0, max_digits=25, null=True, unique=True)),
                ('google_uid', models.DecimalField(decimal_places=0, max_digits=25, null=True, unique=True)),
                ('timezone', models.CharField(max_length=30, null=True)),
                ('reputation', models.PositiveSmallIntegerField(default=80)),
                ('experience', models.PositiveSmallIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ula_event',
            name='ULA',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activitytree.UserLearningActivity'),
        ),
        migrations.AddField(
            model_name='course',
            name='root',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='activitytree.LearningActivity'),
        ),
        migrations.AddField(
            model_name='authorlearningactivity',
            name='learning_activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='activitytree.LearningActivity'),
        ),
        migrations.AddField(
            model_name='authorlearningactivity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='activitytree',
            name='current_activity',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_in', to='activitytree.UserLearningActivity'),
        ),
        migrations.AddField(
            model_name='activitytree',
            name='root_activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_tree', to='activitytree.LearningActivity'),
        ),
        migrations.AddField(
            model_name='activitytree',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='userlearningactivity',
            unique_together={('user', 'learning_activity')},
        ),
        migrations.AlterUniqueTogether(
            name='facebooksession',
            unique_together={('access_token', 'expires'), ('user', 'uid')},
        ),
        migrations.AlterUniqueTogether(
            name='activitytree',
            unique_together={('user', 'root_activity')},
        ),
    ]
